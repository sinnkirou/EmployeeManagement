<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddressInputError" xml:space="preserve">
    <value>Address invalid, please input again:</value>
  </data>
  <data name="AddressInputTips" xml:space="preserve">
    <value>Please input the address (opitional):</value>
  </data>
  <data name="BirthInputError" xml:space="preserve">
    <value>Birthday invalid, please input again such as '2016-1-30':</value>
  </data>
  <data name="BirthInputTips" xml:space="preserve">
    <value>Please input the birthday with format as '2016-1-30':</value>
  </data>
  <data name="CreateFailInfo" xml:space="preserve">
    <value>Creation fail.</value>
  </data>
  <data name="CreateInfo" xml:space="preserve">
    <value>Please do following instructions to create:</value>
  </data>
  <data name="CreateSuccessInfo" xml:space="preserve">
    <value>Creation successfully.</value>
  </data>
  <data name="DeleteFailInfo" xml:space="preserve">
    <value>Delete fail.</value>
  </data>
  <data name="DeleteInfo" xml:space="preserve">
    <value>Please do following steps to delete:</value>
  </data>
  <data name="DeleteSuccessInfo" xml:space="preserve">
    <value>Delete successfully.</value>
  </data>
  <data name="DeleteWarning1" xml:space="preserve">
    <value>Your are deleting</value>
  </data>
  <data name="DeleteWarning2" xml:space="preserve">
    <value>'s information. Please press 'D' to delete:</value>
  </data>
  <data name="FirstNameInputTips" xml:space="preserve">
    <value>Please input the first name:</value>
  </data>
  <data name="GenderInputError" xml:space="preserve">
    <value>Gender invalid, please input again (M for male,F for female):</value>
  </data>
  <data name="GenderInputTips" xml:space="preserve">
    <value>Please input the gender(M for male,F for female):</value>
  </data>
  <data name="IdInputError" xml:space="preserve">
    <value>Should be a positive integer. Please input again:</value>
  </data>
  <data name="IdInputTips" xml:space="preserve">
    <value>Please input the employee Id:</value>
  </data>
  <data name="InvalidOptionError" xml:space="preserve">
    <value>Invalid input, please input again.</value>
  </data>
  <data name="LastNameInputTips" xml:space="preserve">
    <value>Please input the last name:</value>
  </data>
  <data name="LoginInputError" xml:space="preserve">
    <value>Should be a positive integer.</value>
  </data>
  <data name="LoginNonExistError" xml:space="preserve">
    <value>Sorry, user not exist.</value>
  </data>
  <data name="LoginTips" xml:space="preserve">
    <value>Please input your employee Id and press ENTER to log in:</value>
  </data>
  <data name="MainPageTips" xml:space="preserve">
    <value>Please input an number to enter the following functions:</value>
  </data>
  <data name="NameInputError" xml:space="preserve">
    <value>Should not be empty, please input again:</value>
  </data>
  <data name="NoOptionsError" xml:space="preserve">
    <value>No such options, please input again.</value>
  </data>
  <data name="Option1" xml:space="preserve">
    <value>1) Display all existent employees</value>
  </data>
  <data name="Option2" xml:space="preserve">
    <value>2) Add new employees.</value>
  </data>
  <data name="Option3" xml:space="preserve">
    <value>3) Search employees.</value>
  </data>
  <data name="Option4" xml:space="preserve">
    <value>4) Update an employee.</value>
  </data>
  <data name="Option5" xml:space="preserve">
    <value>5) Delete an employee.</value>
  </data>
  <data name="Option9" xml:space="preserve">
    <value>9) Logout.</value>
  </data>
  <data name="PhoneInputError" xml:space="preserve">
    <value>Phone invalid, please input again (home phone/cell phone), such as 18842661234 or 0571-87647620:</value>
  </data>
  <data name="PhoneInputTips" xml:space="preserve">
    <value>Please input the phone number(home phone/cell phone), such as 18842661234 or 0571-87647620:</value>
  </data>
  <data name="ResultCountInfo" xml:space="preserve">
    <value>employees has been found as follows:</value>
  </data>
  <data name="ResultTitle" xml:space="preserve">
    <value>ID    |   Name   | Gender |  Birthday  |   Address   |     Phone     |</value>
  </data>
  <data name="ReturnInfo" xml:space="preserve">
    <value>press ESC to return:</value>
  </data>
  <data name="SearchedZeroInfo" xml:space="preserve">
    <value>No employee has found.</value>
  </data>
  <data name="SearchInfo" xml:space="preserve">
    <value>Please do following instructions to search for employees ( PS: leave a blank if you don't want to use it as the conditons):</value>
  </data>
  <data name="UpdateFailInfo" xml:space="preserve">
    <value>Update fail.</value>
  </data>
  <data name="UpdateInfo" xml:space="preserve">
    <value>Please do following steps to update:</value>
  </data>
  <data name="UpdateInfo1" xml:space="preserve">
    <value>Your are updating</value>
  </data>
  <data name="UpdateInfo2" xml:space="preserve">
    <value>'s information. ( PS: leave a blank if you don't want to change the record):</value>
  </data>
  <data name="UpdateSuccessInfo" xml:space="preserve">
    <value>Update successfully.</value>
  </data>
  <data name="WelcomeInfo1" xml:space="preserve">
    <value>Hello, welcome</value>
  </data>
  <data name="WelcomeInfo2" xml:space="preserve">
    <value>to Employee Management System!!</value>
  </data>
</root>